/*
===================================================
__________________________________________________
| ___ \| ___ \|  _  || | | |  |  ___|\ \ / /|  ___| 
| |_/ /| |_/ /| | | || | | |  | |__   \ V / | |__   
|  __/ |    / | | | || | | |  |  __|  /   \ |  __|  
| |    | |\ \ \ \_/ /\ \_/ /_ | |___ / /^\ \| |___  
\_|    \_| \_| \___/  \___/(_)\____/ \/   \/\____/ 
Raw_Data By ZION
======================================================

// => Intilization of the entire Program :D
DWORD __stdcall StartAddress(LPVOID lpThreadParameter)
{
  void (__stdcall *v1)(HWND, LPCWSTR); // edi@1
  signed int v2; // edi@15
  char v3; // dl@16
  wchar_t *v4; // eax@17
  wchar_t *v5; // esi@22
  int v6; // edx@23
  wchar_t v7; // cx@24
  int v8; // ebx@25
  size_t v9; // edi@25
  signed int v10; // esi@34
  char v11; // ST36_1@37
  wchar_t *v12; // ST1C_4@37
  int v13; // ecx@37
  char v14; // ST36_1@40
  __int16 v15; // bx@43
  _DWORD *v16; // ecx@43
  int v17; // edi@43
  wchar_t *v18; // edx@46
  unsigned int v19; // esi@46
  int v20; // ebx@47
  int v21; // eax@48
  wchar_t *v22; // eax@56
  char *v23; // edx@56
  signed int v24; // esi@58
  signed int v25; // esi@66
  wchar_t *v26; // ST20_4@68
  int v27; // ecx@70
  char v29; // [sp+18h] [bp-B2Eh]@43
  char v30; // [sp+19h] [bp-B2Dh]@34
  signed int v31; // [sp+1Ah] [bp-B2Ch]@15
  int v32; // [sp+1Eh] [bp-B28h]@46
  wchar_t *v33; // [sp+22h] [bp-B24h]@46
  int v34; // [sp+26h] [bp-B20h]@46
  int v35; // [sp+2Ah] [bp-B1Ch]@46
  int v36; // [sp+2Eh] [bp-B18h]@46
  int v37; // [sp+32h] [bp-B14h]@46
  __int16 v38; // [sp+36h] [bp-B10h]@43
  char v39; // [sp+38h] [bp-B0Eh]@43
  WCHAR String; // [sp+136h] [bp-A10h]@37
  wchar_t v41; // [sp+936h] [bp-210h]@68

  dword_41CF80 = GetTempPathW(0x100u, &Buffer);
  sub_403450(L"Checking Windows version...");
  v1 = (void (__stdcall *)(HWND, LPCWSTR))SetWindowTextW;
  SetWindowTextW(hWnd, L"Checking Windows version...");
  if ( !(unsigned __int8)Verfification_Routine() )
  {
    sub_403450(L"This version of Windows is not supported. Please follow the manual steps to configure your wireless access");
    MessageBoxW(
      wParam,
      L"This version of Windows is not supported. Please follow the manual steps to configure your wireless access",
      L"Error",
      0x10u);
LABEL_74:
    sub_403450(L"Configuration Failed");
    v1(hWnd, L"Configuration Failed");
    PostMessageW(HWND_BROADCAST, 0x28u, (WPARAM)wParam, 1);
    EnableWindow(dword_41D530, 1);
    return 0;
  }
  sub_403450(L"Checking User Privilege ...");
  SetWindowTextW(hWnd, L"Checking User Privilege ...");
  CoInitialize(0);
  CoInitializeSecurity(0, -1, 0, 0, 1u, 3u, 0, 0, 0);
  sub_403450(L"Loading wireless configurations ...");
  SetWindowTextW(hWnd, L"Loading wireless configurations ...");
  sub_4037F0();
  Sleep(0x12Cu);
  if ( !(unsigned __int8)sub_404290() && !byte_41D546 )
  {
    sub_403450(L"No valid wireless configuration is found. Please contact your IT staff");
    MessageBoxW(wParam, L"No valid wireless configuration is found. Please contact your IT staff", L"Error", 0x10u);
    goto LABEL_74;
  }
  sub_403450(L"Searching wireless adapters ...");
  SetWindowTextW(hWnd, L"Searching wireless adapters ...");
  Sleep(0x12Cu);
  if ( sub_401450() )
  {
    sub_403450(L"Unable to query Windows for wireless adapters");
LABEL_10:
    sub_403450(L"No wireless adapter identified. Please check if one is plugged-in and enabled");
    MessageBoxW(
      wParam,
      L"No wireless adapter identified. Please check if one is plugged-in and enabled",
      L"Error",
      0x10u);
    goto LABEL_74;
  }
  if ( !*(_DWORD *)dword_41D52C )
  {
    sub_403450(L"No wireless adapter found");
    goto LABEL_10;
  }
  sub_403450(L"Preparing configuration...");
  SetWindowTextW(hWnd, L"Preparing configuration...");
  if ( byte_41D546 )
  {
    if ( byte_41D544 )
      sub_403450(L"-clearall specified, All profiles will be deleted");
    sub_4015A0(0);
  }
  else
  {
    Sleep(0x12Cu);
    v2 = 0;
    v31 = 0;
    do
    {
      v3 = *((_BYTE *)&dword_41D288 + v2);
      if ( !v3 )
        break;
      v4 = *(wchar_t **)&dword_41D188[2 * v2];
      if ( !v4 )
        break;
      if ( v3 == 2 || v3 == 1 )
      {
        sub_4015A0(*(_DWORD *)&dword_41D188[2 * v2]);
      }
      else if ( v3 == 3 )
      {
        if ( byte_41D547 )
        {
          v5 = *(wchar_t **)&dword_41D188[2 * v2];
        }
        else
        {
          v6 = (int)(v4 + 1);
          do
          {
            v7 = *v4;
            ++v4;
          }
          while ( v7 );
          v8 = ((signed int)v4 - v6) >> 1;
          v9 = v8 + dword_41CF80;
          if ( v8 + dword_41CF80 > 0x100 )
            v9 = 256;
          v5 = (wchar_t *)operator new(2 * (v9 + 1));
          wcsncpy(v5, &Buffer, dword_41CF80);
          wcsncpy(&v5[dword_41CF80], *(const wchar_t **)&dword_41D188[2 * v31], v8);
          v5[v9] = 0;
          v2 = v31;
        }
        if ( !(unsigned __int8)sub_402550(v5) )
        {
          ShowWindow(wParam, 0);
          sub_403450(L"Your personal certificate has been created. Click OK to install it.\nCertificate Import Wizard will be launched. Please accept the default settings until it is finished.");
          MessageBoxW(
            wParam,
            L"Your personal certificate has been created. Click OK to install it.\n"
             "Certificate Import Wizard will be launched. Please accept the default settings until it is finished.",
            L"Info",
            0x40u);
          _wsystem(v5);
          ShowWindow(wParam, 5);
        }
        if ( !byte_41D547 )
          operator delete(v5);
      }
      v31 = ++v2;
    }
    while ( v2 < 32 );
  }
  v30 = 1;
  v10 = 0;
  do
  {
    if ( !(&dword_41D2A8)[2 * v10] )
      break;
    if ( *((_BYTE *)&dword_41D288 + v10) == 2 )
    {
      v11 = sub_4016B0((&dword_41D2A8)[2 * v10]);
      v12 = *(wchar_t **)&dword_41D188[2 * v10];
      sub_401000(v13, &String);
      sub_403450(&String);
      SetWindowTextW(hWnd, &String);
      if ( v11 )
        v30 = 0;
    }
    if ( *((_BYTE *)&dword_41D288 + v10) == 5 )
    {
      v14 = sub_401FC0(*(_DWORD *)&dword_41D188[2 * v10], (&dword_41D2A8)[2 * v10]);
      sub_401000(*(_DWORD *)&dword_41D188[2 * v10], &String);
      sub_403450(&String);
      SetWindowTextW(hWnd, &String);
      if ( v14 )
        v30 = 0;
    }
    ++v10;
  }
  while ( v10 < 32 );
  v15 = 0;
  v29 = 0;
  v38 = 0;
  memset(&v39, 0, 0xFEu);
  v16 = (_DWORD *)dword_41D52C;
  v17 = 0;
  while ( (&dword_41D2A8)[2 * v17] )
  {
    if ( *((_BYTE *)&dword_41D288 + v17) == 2 )
    {
      v18 = *(wchar_t **)&dword_41D188[2 * v17];
      v34 = 0;
      v35 = 0;
      v32 = 0;
      v33 = v18;
      v36 = 1;
      v37 = 1;
      v19 = 0;
      v29 = 0;
      if ( *v16 > 0u )
      {
        v20 = 0;
        while ( 1 )
        {
          v21 = WlanConnect(dword_41D528, &v16[v20 + 2], &v32, 0);
          v16 = (_DWORD *)dword_41D52C;
          if ( !v21 )
            break;
          ++v19;
          v20 += 133;
          if ( v19 >= *(_DWORD *)dword_41D52C )
            goto LABEL_52;
        }
        v29 = 1;
LABEL_52:
        v15 = 0;
      }
      if ( v29 )
      {
        v22 = *(wchar_t **)&dword_41D188[2 * v17];
        v23 = (char *)((char *)&v38 - (char *)v22);
        do
        {
          v16 = (_DWORD *)*v22;
          *(wchar_t *)((char *)v22 + (_DWORD)v23) = (unsigned __int16)v16;
          ++v22;
        }
        while ( (_WORD)v16 != v15 );
        break;
      }
    }
    if ( ++v17 >= 32 )
      break;
  }
  v24 = 0;
  do
  {
    if ( *(_DWORD *)&dword_41D188[v24] )
    {
      free(*(void **)&dword_41D188[v24]);
      *(_DWORD *)&dword_41D188[v24] = 0;
    }
    if ( (&dword_41D2A8)[v24] )
    {
      free((&dword_41D2A8)[v24]);
      (&dword_41D2A8)[v24] = 0;
    }
    v24 += 2;
  }
  while ( v24 < 64 );
  if ( dword_41D528 )
    WlanCloseHandle(v16, dword_41D528, 0);
  v25 = 0;
  do
  {
    if ( *((_BYTE *)&dword_41D288 + v25) == 4 )
    {
      v26 = *(wchar_t **)&dword_41D188[2 * v25];
      sub_401000(v16, &v41);
      _wsystem(&v41);
    }
    ++v25;
  }
  while ( v25 < 32 );
  CoUninitialize();
  if ( v30 && !byte_41D545 && !byte_41D546 )
  {
    sub_403450(L"None of your wireless adapter can be configured. It's likely that you need a newer wireless adapter or its driver.");
    MessageBoxW(
      wParam,
      L"None of your wireless adapter can be configured. It's likely that you need a newer wireless adapter or its driver.",
      L"Error",
      0x10u);
    v1 = (void (__stdcall *)(HWND, LPCWSTR))SetWindowTextW;
    goto LABEL_74;
  }
  if ( v29 )
  {
    sub_403450(L"You are now successfully connected to Secured Wireless network. You may now access your applicatons");
    SetWindowTextW(
      hWnd,
      L"You are now successfully connected to Secured Wireless network. You may now access your applicatons");
  }
  else
  {
    sub_401000(v27, &String);
    sub_403450(&String);
    SetWindowTextW(hWnd, &String);
  }
  EnableWindow(dword_41D530, 1);
  if ( byte_41D545 || byte_41D546 )
    PostMessageW(wParam, 0x111u, 8u, 0);
  else
    PostMessageW(HWND_BROADCAST, 0x28u, (WPARAM)wParam, 1);
  return 0;
}








int Adapter_Seeking()
{
  unsigned int i; // edi@3
  RPC_WSTR StringUuid; // [sp+14h] [bp-828h]@1
  int v3; // [sp+18h] [bp-824h]@1
  unsigned int *v4; // [sp+1Ch] [bp-820h]@1
  char v5; // [sp+20h] [bp-81Ch]@6
  CPPEH_RECORD ms_exc; // [sp+824h] [bp-18h]@1

  v4 = 0;
  StringUuid = 0;
  ms_exc.registration.TryLevel = 0;
  v3 = sub_4013B0();
  if ( !v3 )
  {
    v3 = WlanEnumInterfaces(dword_41D528, 0, &v4);
    if ( !v3 )
    {
      for ( i = 0; i < *v4; ++i )
      {
        if ( !UuidToStringW((const UUID *)&v4[133 * i + 2], &StringUuid) )
        {
          sub_401000(StringUuid, &v5);
          sub_4034F0();
          RpcStringFreeW(&StringUuid);
        }
      }
      dword_41D52C = (int)v4;
      v4 = 0;
    }
  }
  ms_exc.registration.TryLevel = -2;
  if ( v4 )
    WlanFreeMemory(v4);
  return v3;
}




BOOL __cdecl Certificate_Storage(OLECHAR *a1)
{
  int v1; // eax@1
  void *v2; // eax@4
  void *v3; // edi@4
  void *v4; // eax@5
  const wchar_t *v5; // ecx@11
  wchar_t *v6; // eax@13
  const CHAR *v7; // ecx@13
  const wchar_t *v8; // edi@13
  BSTR *v9; // eax@18
  BSTR *v10; // edi@18
  OLECHAR *v11; // ST00_4@19
  BSTR v12; // eax@19
  int v13; // ecx@27
  const wchar_t *v14; // ecx@34
  wchar_t *v15; // eax@36
  const CHAR *v16; // ecx@36
  const wchar_t *v17; // edi@36
  BSTR *v18; // eax@41
  BSTR *v19; // edi@41
  OLECHAR *v20; // esi@41
  OLECHAR *v21; // ST00_4@42
  BSTR v22; // eax@42
  int v23; // eax@50
  int v24; // ecx@50
  void *v25; // esi@53
  const CHAR *v27; // [sp-Ch] [bp-868h]@14
  const wchar_t *v28; // [sp-8h] [bp-864h]@13
  const CHAR *v29; // [sp-4h] [bp-860h]@5
  int v30; // [sp+0h] [bp-85Ch]@1
  _DWORD *v31; // [sp+24h] [bp-838h]@9
  _DWORD *v32; // [sp+28h] [bp-834h]@18
  const CHAR **v33; // [sp+2Ch] [bp-830h]@13
  void *v34; // [sp+30h] [bp-82Ch]@4
  int v35; // [sp+34h] [bp-828h]@1
  OLECHAR *psz; // [sp+38h] [bp-824h]@1
  char v37; // [sp+3Eh] [bp-81Eh]@28
  char v38; // [sp+3Fh] [bp-81Dh]@51
  char v39; // [sp+40h] [bp-81Ch]@12
  int *v40; // [sp+84Ch] [bp-10h]@1
  int v41; // [sp+858h] [bp-4h]@1

  v40 = &v30;
  v41 = 0;
  psz = a1;
  v35 = 0;
  v1 = sub_4029F0();
  if ( v1 < 0 && v1 != -2147467262 )
    sub_404760(v1);
  LOBYTE(v41) = 1;
  v2 = operator new(0xCu);
  v3 = v2;
  v34 = v2;
  LOBYTE(v41) = 2;
  if ( v2 )
  {
    v29 = "My";
    *((_DWORD *)v2 + 1) = 0;
    *((_DWORD *)v2 + 2) = 1;
    *(_DWORD *)v2 = sub_404800(v29);
    v4 = v3;
  }
  else
  {
    v4 = 0;
  }
  LOBYTE(v41) = 1;
  v34 = v4;
  if ( !v4 )
    sub_404760(-2147024882);
  v29 = (const CHAR *)v4;
  v31 = &v29;
  InterlockedIncrement((volatile LONG *)v4 + 2);
  LOBYTE(v41) = 4;
  if ( !v35 )
    sub_404760(-2147467261);
  LOBYTE(v41) = 3;
  if ( sub_4011E0(v35, 2, (void *)v29) < 0 )
  {
    v29 = (const CHAR *)L"Open personal certificate store failed.";
    sub_401000(v5, &v39);
    sub_403450(&v39);
  }
  v29 = 0;
  v28 = v5;
  v31 = &v28;
  v6 = (wchar_t *)operator new(0xCu);
  v8 = v6;
  v33 = (const CHAR **)v6;
  LOBYTE(v41) = 5;
  if ( v6 )
  {
    v27 = byte_417D58;
    *((_DWORD *)v6 + 1) = 0;
    *((_DWORD *)v6 + 2) = 1;
    *(_DWORD *)v6 = sub_404800(v27);
  }
  else
  {
    v8 = 0;
  }
  LOBYTE(v41) = 3;
  v28 = v8;
  if ( !v8 )
    sub_404760(-2147024882);
  v27 = v7;
  LOBYTE(v41) = 6;
  v33 = &v27;
  v9 = (BSTR *)operator new(0xCu);
  v10 = v9;
  v32 = v9;
  LOBYTE(v41) = 7;
  if ( v9 )
  {
    v11 = psz;
    v9[1] = 0;
    v9[2] = (BSTR)1;
    v12 = SysAllocString(v11);
    *v10 = v12;
    if ( !v12 && psz )
      sub_404760(-2147024882);
  }
  else
  {
    v10 = 0;
  }
  LOBYTE(v41) = 6;
  v27 = (const CHAR *)v10;
  if ( !v10 )
    sub_404760(-2147024882);
  LOBYTE(v41) = 8;
  if ( !v35 )
    sub_404760(-2147467261);
  LOBYTE(v41) = 3;
  if ( sub_4012A0((void *)v27, (void *)v28, (int)v29) >= 0 )
  {
    v29 = (const CHAR *)psz;
    v28 = L"Installed personal certificate '%s'.";
    sub_401000(psz, &v39);
    v37 = 1;
  }
  else
  {
    v29 = (const CHAR *)psz;
    v28 = L"Failed to load personal certificate %s.";
    sub_401000(v13, &v39);
    v37 = 0;
  }
  sub_403450(&v39);
  sub_401070();
  v32 = &v29;
  v29 = (const CHAR *)v34;
  if ( v34 )
    InterlockedIncrement((volatile LONG *)v34 + 2);
  LOBYTE(v41) = 9;
  if ( !v35 )
    sub_404760(-2147467261);
  LOBYTE(v41) = 3;
  if ( sub_4011E0(v35, 2, (void *)v29) < 0 )
  {
    v29 = (const CHAR *)L"Open root certificate store failed.";
    sub_401000(v14, &v39);
    sub_403450(&v39);
  }
  v29 = 0;
  v28 = v14;
  v32 = &v28;
  v15 = (wchar_t *)operator new(0xCu);
  v17 = v15;
  v33 = (const CHAR **)v15;
  LOBYTE(v41) = 10;
  if ( v15 )
  {
    v27 = byte_417D58;
    *((_DWORD *)v15 + 1) = 0;
    *((_DWORD *)v15 + 2) = 1;
    *(_DWORD *)v15 = sub_404800(v27);
  }
  else
  {
    v17 = 0;
  }
  LOBYTE(v41) = 3;
  v28 = v17;
  if ( !v17 )
    sub_404760(-2147024882);
  v27 = v16;
  LOBYTE(v41) = 11;
  v33 = &v27;
  v18 = (BSTR *)operator new(0xCu);
  v19 = v18;
  v31 = v18;
  v20 = psz;
  LOBYTE(v41) = 12;
  if ( v18 )
  {
    v21 = psz;
    v18[1] = 0;
    v18[2] = (BSTR)1;
    v22 = SysAllocString(v21);
    *v19 = v22;
    if ( !v22 && v20 )
      sub_404760(-2147024882);
  }
  else
  {
    v19 = 0;
  }
  LOBYTE(v41) = 11;
  v27 = (const CHAR *)v19;
  if ( !v19 )
    sub_404760(-2147024882);
  LOBYTE(v41) = 13;
  if ( !v35 )
    sub_404760(-2147467261);
  LOBYTE(v41) = 3;
  v23 = sub_4012A0((void *)v27, (void *)v28, (int)v29);
  v29 = (const CHAR *)v20;
  if ( v23 >= 0 )
  {
    v28 = L"Installed root certificate '%s'.";
    sub_401000(v24, &v39);
    v38 = 1;
  }
  else
  {
    v28 = L"Failed to load root certificate %s.";
    sub_401000(v24, &v39);
    v38 = 0;
  }
  sub_403450(&v39);
  LOBYTE(v41) = 1;
  v25 = v34;
  if ( v34 && !InterlockedDecrement((volatile LONG *)v34 + 2) )
  {
    if ( *(_DWORD *)v25 )
    {
      v29 = *(const CHAR **)v25;
      SysFreeString((BSTR)v29);
    }
    if ( *((_DWORD *)v25 + 1) )
    {
      v29 = (const CHAR *)*((_DWORD *)v25 + 1);
      sub_404ED3(v29);
    }
    operator delete(v25);
  }
  LOBYTE(v41) = 0;
  if ( v35 )
    (*(void (__stdcall **)(int))(*(_DWORD *)v35 + 8))(v35);
  return v37 && v38;
}


char __thiscall sub_404290(void *this)
{
  int v1; // esi@1
  char v2; // al@2
  wchar_t *v3; // eax@4
  int v4; // eax@5
  int v5; // ecx@5
  int v6; // eax@8
  int v7; // ecx@8
  int v8; // ecx@11
  int v9; // ecx@13
  int v10; // ST08_4@16
  int v11; // ecx@16
  int v12; // ST0C_4@17
  char v14; // [sp+8h] [bp-804h]@6

  v1 = 0;
  while ( 1 )
  {
    v2 = *((_BYTE *)&dword_41D288 + v1);
    if ( !v2 )
      return 1;
    if ( v2 == 2 )
    {
      v3 = wcsstr((&dword_41D2A8)[2 * v1], L"<SSID>");
      if ( !v3 )
      {
        sub_403450(L"Invalid XML, no <SSID> found");
        sub_403450(L"Your file may be corrupted. Please download again.");
        MessageBoxW(wParam, L"Your file may be corrupted. Please download again.", L"Error", 0x10u);
        return 0;
      }
      v4 = sub_404660(v3);
      if ( !v4 )
      {
        sub_403450(L"Invalid XML, no element <name> found");
        return 0;
      }
      *(_DWORD *)&dword_41D188[2 * v1] = v4;
      sub_401000(v5, &v14);
      sub_403450(&v14);
      goto LABEL_20;
    }
    if ( v2 == 5 )
      break;
    if ( v2 == 1 )
    {
      *(_DWORD *)&dword_41D188[2 * v1] = _wcsdup((&dword_41D2A8)[2 * v1]);
      sub_401000(v8, &v14);
      goto LABEL_18;
    }
    if ( v2 == 3 )
    {
      *(_DWORD *)&dword_41D188[2 * v1] = _wcsdup((&dword_41D2A8)[2 * v1]);
      sub_401000(v9, &v14);
      if ( byte_41D544 )
        sub_403450(&v14);
      goto LABEL_20;
    }
    if ( v2 != 4 )
    {
      v12 = *(_DWORD *)&dword_41D188[2 * v1];
      sub_401000(this, &v14);
LABEL_18:
      if ( byte_41D544 )
        sub_403450(&v14);
      goto LABEL_20;
    }
    sub_404500(v1);
    v10 = *(_DWORD *)&dword_41D188[2 * v1];
    sub_401000(v11, &v14);
    sub_403450(&v14);
LABEL_20:
    if ( ++v1 >= 32 )
      return 1;
  }
  v6 = sub_404660((&dword_41D2A8)[2 * v1]);
  if ( v6 )
  {
    *(_DWORD *)&dword_41D188[2 * v1] = v6;
    sub_401000(v7, &v14);
    sub_403450(&v14);
    goto LABEL_20;
  }
  sub_403450(L"No XML for peap-user XML, no element <MsPeap:RoutingIdentity> found");
  return 0;
}